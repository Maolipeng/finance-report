{"version":3,"sources":["components/Upload/style.js","components/Upload/index.jsx","utils/export2Excel.js","views/Table/style.js","views/Table/index.jsx","utils/index.js"],"names":["UploadStyle","styled","div","Upload","props","beforeUpload","onSuccess","useState","setFileList","setExcelData","inputFileRef","useRef","readerData","rawFile","Promise","resolve","reject","reader","FileReader","onload","e","data","target","result","workbook","XLSX","read","type","firstSheetName","SheetNames","worksheet","Sheets","header","getHeaderRow","results","utils","sheet_to_json","generateData","readAsArrayBuffer","upload","current","files","sheet","C","headers","range","decode_range","R","s","r","c","cell","encode_cell","hdr","t","format_cell","push","excelData","console","log","ref","className","accept","onChange","length","onClick","click","sheet_from_array_of_arrays","opts","v","ws","cell_ref","Date","z","SSF","_table","datenum","parse","UTC","encode_range","Workbook","this","s2ab","buf","ArrayBuffer","view","Uint8Array","i","charCodeAt","TableStyle","orginData","Table","exportName","setExportName","tableData","setTableData","columns","setColumns","reqParams","columnsStateMap","setColumnsStateMap","filterDataFn","params","paramList","Object","keys","filter","item","every","p","formatJson","filterVal","jsonData","map","j","time","cFormat","arguments","date","format","test","parseInt","replace","RegExp","toString","formatObj","y","getFullYear","m","getMonth","d","getDate","h","getHours","getMinutes","getSeconds","a","getDay","time_str","key","value","padStart","parseTime","headerColumns","title","dataIndex","copyable","style","width","marginRight","disabled","headerList","HideColumns","tHeader","includes","multiHeader","filename","merges","autoWidth","bookType","unshift","ws_name","wb","forEach","colWidth","row","val","wch","wbout","write","bookSST","saveAs","Blob","export_json_to_excel","size","rowKey","onColumnsStateChange","setColumnsShow","request","setTimeout","success","postData"],"mappings":"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","file":"static/js/4.cce93966.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const UploadStyle = styled.div`\n  .excel-upload-input {\n    display: none;\n    z-index: -9999;\n  }\n  .drop {\n    border: 2px dashed #bbb;\n    width: 600px;\n    height: 160px;\n    line-height: 160px;\n    margin: 0 auto;\n    font-size: 24px;\n    border-radius: 5px;\n    text-align: center;\n    color: #bbb;\n    position: relative;\n  }\n`\n","import React, { useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Button } from 'antd'\nimport XLSX from 'xlsx'\nimport { UploadStyle } from './style.js'\n\nconst Upload = (props) => {\n  const { beforeUpload, onSuccess } = props\n  const [fileList, setFileList] = useState([])\n  const [excelData, setExcelData] = useState({})\n  const inputFileRef = useRef(null)\n  const handleClick = () => {\n    console.log('inputFileRef.current.files', inputFileRef.current.files)\n    if (inputFileRef.current.files.length) {\n      setFileList(inputFileRef.current.files)\n      const rawFile = inputFileRef.current.files[0]\n      upload(rawFile)\n      // beforeUploadHook(inputFileRef.current.files)\n    }\n  }\n  const handleUpload = () => {\n    inputFileRef.current.click()\n  }\n  const readerData = (rawFile) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onload = (e) => {\n        const data = e.target.result\n        const workbook = XLSX.read(data, { type: 'array' })\n        const firstSheetName = workbook.SheetNames[0]\n        const worksheet = workbook.Sheets[firstSheetName]\n        const header = getHeaderRow(worksheet)\n        const results = XLSX.utils.sheet_to_json(worksheet)\n        generateData({ header, results })\n        resolve()\n      }\n      reader.readAsArrayBuffer(rawFile)\n    })\n  }\n  const upload = (rawFile) => {\n    inputFileRef.current.files = null\n    if (beforeUpload) {\n      readerData(rawFile)\n      return\n    }\n    const before = beforeUpload(rawFile)\n    if (before) {\n      readerData(rawFile)\n    }\n    readerData(rawFile)\n  }\n  const getHeaderRow = (sheet) => {\n    const headers = []\n    const range = XLSX.utils.decode_range(sheet['!ref'])\n    let C\n    const R = range.s.r\n    /* start in the first row */\n    for (C = range.s.c; C <= range.e.c; ++C) {\n      /* walk every column in the range */\n      const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n      /* find the cell in the first row */\n      let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n      if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n      headers.push(hdr)\n    }\n    return headers\n  }\n  const generateData = ({ header, results }) => {\n    const excelData = {}\n    excelData.header = header\n    excelData.results = results\n    console.log('excelData', excelData)\n    setExcelData(excelData)\n    onSuccess && onSuccess(excelData)\n  }\n  return (\n    <UploadStyle>\n      <input\n        ref={inputFileRef}\n        className=\"excel-upload-input\"\n        type=\"file\"\n        accept=\".xlsx, .xls\"\n        onChange={handleClick}\n      />\n      <div\n        className=\"drop\"\n        // onDrop=\"handleDrop\"\n        // onDragover=\"handleDragover\"\n        // onDragenter=\"handleDragover\"\n      >\n        Drop excel file here or\n        <Button type=\"primary\" onClick={handleUpload}>\n          Browse\n        </Button>\n      </div>\n    </UploadStyle>\n  )\n}\n\nUpload.propTypes = {\n  onSuccess: PropTypes.func,\n  beforeUpload: PropTypes.func,\n}\n\nexport default Upload\n","import { saveAs } from 'file-saver'\nimport XLSX from 'xlsx'\n\nfunction generateArray(table) {\n  var out = []\n  var rows = table.querySelectorAll('tr')\n  var ranges = []\n  for (var R = 0; R < rows.length; ++R) {\n    var outRow = []\n    var row = rows[R]\n    var columns = row.querySelectorAll('td')\n    for (var C = 0; C < columns.length; ++C) {\n      var cell = columns[C]\n      var colspan = cell.getAttribute('colspan')\n      var rowspan = cell.getAttribute('rowspan')\n      var cellValue = cell.innerText\n      if (cellValue !== '' && cellValue == +cellValue) cellValue = +cellValue\n\n      //Skip ranges\n      ranges.forEach(function (range) {\n        if (\n          R >= range.s.r &&\n          R <= range.e.r &&\n          outRow.length >= range.s.c &&\n          outRow.length <= range.e.c\n        ) {\n          for (var i = 0; i <= range.e.c - range.s.c; ++i) outRow.push(null)\n        }\n      })\n\n      //Handle Row Span\n      if (rowspan || colspan) {\n        rowspan = rowspan || 1\n        colspan = colspan || 1\n        ranges.push({\n          s: {\n            r: R,\n            c: outRow.length,\n          },\n          e: {\n            r: R + rowspan - 1,\n            c: outRow.length + colspan - 1,\n          },\n        })\n      }\n\n      //Handle Value\n      outRow.push(cellValue !== '' ? cellValue : null)\n\n      //Handle Colspan\n      if (colspan) for (var k = 0; k < colspan - 1; ++k) outRow.push(null)\n    }\n    out.push(outRow)\n  }\n  return [out, ranges]\n}\n\nfunction datenum(v, date1904) {\n  if (date1904) v += 1462\n  var epoch = Date.parse(v)\n  return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000)\n}\n\nfunction sheet_from_array_of_arrays(data, opts) {\n  var ws = {}\n  var range = {\n    s: {\n      c: 10000000,\n      r: 10000000,\n    },\n    e: {\n      c: 0,\n      r: 0,\n    },\n  }\n  for (var R = 0; R != data.length; ++R) {\n    for (var C = 0; C != data[R].length; ++C) {\n      if (range.s.r > R) range.s.r = R\n      if (range.s.c > C) range.s.c = C\n      if (range.e.r < R) range.e.r = R\n      if (range.e.c < C) range.e.c = C\n      var cell = {\n        v: data[R][C],\n      }\n      if (cell.v == null) continue\n      var cell_ref = XLSX.utils.encode_cell({\n        c: C,\n        r: R,\n      })\n\n      if (typeof cell.v === 'number') cell.t = 'n'\n      else if (typeof cell.v === 'boolean') cell.t = 'b'\n      else if (cell.v instanceof Date) {\n        cell.t = 'n'\n        cell.z = XLSX.SSF._table[14]\n        cell.v = datenum(cell.v)\n      } else cell.t = 's'\n\n      ws[cell_ref] = cell\n    }\n  }\n  if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range)\n  return ws\n}\n\nfunction Workbook() {\n  if (!(this instanceof Workbook)) return new Workbook()\n  this.SheetNames = []\n  this.Sheets = {}\n}\n\nfunction s2ab(s) {\n  var buf = new ArrayBuffer(s.length)\n  var view = new Uint8Array(buf)\n  for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xff\n  return buf\n}\n\nexport function export_table_to_excel(id) {\n  var theTable = document.getElementById(id)\n  var oo = generateArray(theTable)\n  var ranges = oo[1]\n\n  /* original data */\n  var data = oo[0]\n  var ws_name = 'SheetJS'\n\n  var wb = new Workbook(),\n    ws = sheet_from_array_of_arrays(data)\n\n  /* add ranges to worksheet */\n  // ws['!cols'] = ['apple', 'banan'];\n  ws['!merges'] = ranges\n\n  /* add worksheet to workbook */\n  wb.SheetNames.push(ws_name)\n  wb.Sheets[ws_name] = ws\n\n  var wbout = XLSX.write(wb, {\n    bookType: 'xlsx',\n    bookSST: false,\n    type: 'binary',\n  })\n\n  saveAs(\n    new Blob([s2ab(wbout)], {\n      type: 'application/octet-stream',\n    }),\n    'test.xlsx'\n  )\n}\n\nexport function export_json_to_excel({\n  multiHeader = [],\n  header,\n  data,\n  filename,\n  merges = [],\n  autoWidth = true,\n  bookType = 'xlsx',\n} = {}) {\n  /* original data */\n  filename = filename || 'excel-list'\n  data = [...data]\n  data.unshift(header)\n\n  for (let i = multiHeader.length - 1; i > -1; i--) {\n    data.unshift(multiHeader[i])\n  }\n\n  var ws_name = 'SheetJS'\n  var wb = new Workbook(),\n    ws = sheet_from_array_of_arrays(data)\n\n  if (merges.length > 0) {\n    if (!ws['!merges']) ws['!merges'] = []\n    merges.forEach((item) => {\n      ws['!merges'].push(XLSX.utils.decode_range(item))\n    })\n  }\n\n  if (autoWidth) {\n    /*设置worksheet每列的最大宽度*/\n    const colWidth = data.map((row) =>\n      row.map((val) => {\n        /*先判断是否为null/undefined*/\n        if (val == null) {\n          return {\n            wch: 10,\n          }\n        } else if (val.toString().charCodeAt(0) > 255) {\n        /*再判断是否为中文*/\n          return {\n            wch: val.toString().length * 2,\n          }\n        } else {\n          return {\n            wch: val.toString().length,\n          }\n        }\n      })\n    )\n    /*以第一行为初始值*/\n    let result = colWidth[0]\n    for (let i = 1; i < colWidth.length; i++) {\n      for (let j = 0; j < colWidth[i].length; j++) {\n        if (result[j]['wch'] < colWidth[i][j]['wch']) {\n          result[j]['wch'] = colWidth[i][j]['wch']\n        }\n      }\n    }\n    ws['!cols'] = result\n  }\n\n  /* add worksheet to workbook */\n  wb.SheetNames.push(ws_name)\n  wb.Sheets[ws_name] = ws\n\n  var wbout = XLSX.write(wb, {\n    bookType: bookType,\n    bookSST: false,\n    type: 'binary',\n  })\n  saveAs(\n    new Blob([s2ab(wbout)], {\n      type: 'application/octet-stream',\n    }),\n    `${filename}.${bookType}`\n  )\n}\n","import styled from 'styled-components'\n\nexport const TableStyle = styled.div`\n  width: 100%;\n  height: 100%;\n  .header {\n    width: 200px;\n    margin: 10px auto;\n  }\n  .upload-container {\n    width: 100%;\n    margin-top: 50px;\n  }\n  .handle-area {\n    margin-top: 50px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n`\n","import React, { useState, useRef } from 'react'\nimport ProTable, { ProColumns } from '@ant-design/pro-table'\nimport { Button, Input } from 'antd'\nimport Upload from '@/components/Upload'\nimport { export_json_to_excel } from '@/utils/export2Excel'\nimport { parseTime } from '@/utils'\n\nimport { TableStyle } from './style.js'\nlet orginData = []\nlet orginColumns = []\nconst Table = (props) => {\n  const [exportName, setExportName] = useState('export-list')\n  const [tableData, setTableData] = useState([])\n  const [columns, setColumns] = useState([])\n  const [reqParams, setReqParams] = useState('')\n  const [columnsStateMap, setColumnsStateMap] = useState({})\n  const uploadSuccessFn = (excelData) => {\n    console.log('excelData1', excelData)\n    const { header, results } = excelData\n    const headerColumns = header.map((item) => ({\n      title: item,\n      dataIndex: item,\n      copyable: true,\n    }))\n    console.log('headerColumns', headerColumns)\n    orginColumns = headerColumns\n    setColumns(headerColumns)\n    // const tableList = results.map(d => ({\n    //   ...d,\n    //   key: d['合同编号']\n    // }))\n    orginData = results\n\n    setTableData(results)\n  }\n  const beforeUpload = (files) => {\n    console.log('files', files)\n    return true\n  }\n  const requestList = (params) => {\n    console.log('params', params)\n    const data = filterDataFn(params)\n\n    return new Promise((resolve, reject) => {\n      console.log('tableData', tableData)\n      setTimeout(() => {\n        resolve({\n          data,\n          success: true,\n        })\n      }, 1000)\n    })\n  }\n  const postData = (data) => {\n    setTableData(data)\n    return data\n  }\n  const filterDataFn = (params) => {\n    const paramList = Object.keys(params)\n    return orginData.filter((item) => {\n      return paramList.every((p) => {\n        if (p === 'current' || p === 'pageSize') {\n          return true\n        } else {\n          return params[p] === item[p]\n        }\n      })\n    })\n  }\n  const exportExcel = () => {\n    const headerList = columns.map((item) => item.title)\n    const HideColumns = Object.keys(columnsStateMap).map(\n      (item) => headerList[item]\n    )\n    console.log('HideColumns', HideColumns)\n    const tHeader = headerList.filter((item) => !HideColumns.includes(item))\n    const list = tableData\n    const data = formatJson(tHeader, list)\n    export_json_to_excel({\n      header: tHeader,\n      data,\n      filename: exportName,\n      autoWidth: true,\n    })\n  }\n  const formatJson = (filterVal, jsonData) => {\n    return jsonData.map((v) =>\n      filterVal.map((j) => {\n        if (j === 'timestamp') {\n          return parseTime(v[j])\n        } else {\n          return v[j]\n        }\n      })\n    )\n  }\n  const setColumnsShow = (map) => {\n    console.log('map', map)\n    setColumnsStateMap(map)\n  }\n  return (\n    <TableStyle>\n      <h1 className=\"header\">报表工具</h1>\n      <div className=\"upload-container\">\n        <Upload onSuccess={uploadSuccessFn} beforeUpload={beforeUpload} />\n      </div>\n      <div className=\"handle-area\">\n        导出文件名字：\n        <Input\n          value={exportName}\n          style={{ width: '200px', marginRight: '100px' }}\n          onChange={(e) => setExportName(e.target.value)}\n        />\n        <Button\n          type=\"primary\"\n          disabled={!tableData.length}\n          onClick={exportExcel}\n        >\n          导出Excel\n        </Button>\n      </div>\n      <div className=\"table-list\">\n        {/* <ProTable\n          className=\"App\"\n          size=\"small\"\n          columns={columns}\n          // defaultData={tableData}\n          rowKey=\"合同编号\"\n          params={reqParams}\n          columnsStateMap={columnsStateMap}\n          onColumnsStateChange={(map) => setColumnsShow(map)}\n          request={requestList}\n          postData={postData}\n        ></ProTable> */}\n        {!!tableData.length && (\n          <ProTable\n            className=\"App\"\n            size=\"small\"\n            columns={columns}\n            // defaultData={tableData}\n            rowKey=\"合同编号\"\n            params={reqParams}\n            columnsStateMap={columnsStateMap}\n            onColumnsStateChange={(map) => setColumnsShow(map)}\n            request={requestList}\n            postData={postData}\n          ></ProTable>\n        )}\n      </div>\n    </TableStyle>\n  )\n}\n\nexport default Table\n","import { handleFetchQueue } from './handleFetchQueue.js'\n\n/**\n *字节转换\n *\n * @param {*} bytes 字节大小\n * @param {*} byteType 传入的固定转换单位，不会再转成其他单位\n * @param {*} isRender false的话返回的是数值用于比大小的场景，true的话返回的是字符串，如 “1 MB” 这种形式，用于页面渲染\n * @returns 返回如isRender描述那样\n */\nfunction byteToSize(bytes, byteType, isRender) {\n  if (!bytes || typeof Number(bytes) != 'number') return\n  bytes = Number(bytes)\n  if (bytes === 0) return '0 B'\n  if (typeof byteType === 'boolean' && isRender === undefined)\n    isRender = byteType\n  const k = 1024\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n  const i =\n    byteType && sizes.includes(byteType)\n      ? sizes.indexOf(byteType)\n      : Math.floor(Math.log(bytes) / Math.log(k))\n  const resultSize = bytes / Math.pow(k, i)\n  return isRender ? `${resultSize.toPrecision(3)}${sizes[i]}` : resultSize\n}\n\nfunction parseTime(time, cFormat) {\n  if (arguments.length === 0 || !time) {\n    return null\n  }\n  const format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}'\n  let date\n  if (typeof time === 'object') {\n    date = time\n  } else {\n    if (typeof time === 'string') {\n      if (/^[0-9]+$/.test(time)) {\n        // support \"1548221490638\"\n        time = parseInt(time)\n      } else {\n        // support safari\n        // https://stackoverflow.com/questions/4310953/invalid-date-in-safari\n        time = time.replace(new RegExp(/-/gm), '/')\n      }\n    }\n\n    if (typeof time === 'number' && time.toString().length === 10) {\n      time = time * 1000\n    }\n    date = new Date(time)\n  }\n  const formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay(),\n  }\n  const time_str = format.replace(/{([ymdhisa])+}/g, (result, key) => {\n    const value = formatObj[key]\n    // Note: getDay() returns 0 on Sunday\n    if (key === 'a') {\n      return ['日', '一', '二', '三', '四', '五', '六'][value]\n    }\n    return value.toString().padStart(2, '0')\n  })\n  return time_str\n}\n\nexport { handleFetchQueue, byteToSize, parseTime }\n"],"sourceRoot":""}